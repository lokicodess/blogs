{
  "title": "Deploying MERN with Docker",
  "date": "2025-01-15",
  "tags": ["MERN", "Docker", "AWS", "DevOps"],
  "content": "&lt;h1&gt;Deploying a MERN Stack Application with Docker&lt;/h1&gt;&lt;p&gt;This post demonstrates how to containerize a MERN (MongoDB, Express, React, Node.js) application using Docker for rapid development and easy deployment on AWS.&lt;/p&gt;&lt;img src=\"https://images.unsplash.com/photo-1605379399642-870262d3d051?w=800&amp;h=400&amp;fit=crop\" alt=\"MERN Docker Deployment\" /&gt;&lt;h2&gt;Prerequisites&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Node.js and npm installed&lt;/li&gt;&lt;li&gt;Docker and Docker Compose installed&lt;/li&gt;&lt;li&gt;Basic understanding of MERN stack&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Project Structure&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;mern-app/\\n├── client/          # React frontend\\n│   ├── Dockerfile\\n├── server/          # Node.js backend\\n│   ├── Dockerfile\\n├── docker-compose.yml&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Sample Dockerfile (Frontend)&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;# client/Dockerfile\\nFROM node:18-alpine as build\\nWORKDIR /app\\nCOPY package*.json ./\\nRUN npm ci\\nCOPY . .\\nRUN npm run build\\nFROM nginx:alpine\\nCOPY --from=build /app/build /usr/share/nginx/html\\nEXPOSE 80\\nCMD [\"nginx\", \"-g\", \"daemon off;\"]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Sample Dockerfile (Backend)&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;# server/Dockerfile\\nFROM node:18-alpine\\nWORKDIR /app\\nCOPY package*.json ./\\nRUN npm ci\\nCOPY . .\\nEXPOSE 5000\\nCMD [\"node\", \"server.js\"]&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Docker Compose Configuration&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;version: '3.8'\\nservices:\\n  frontend:\\n    build: ./client\\n    ports:\\n      - \"3000:80\"\\n    depends_on:\\n      - backend\\n  backend:\\n    build: ./server\\n    ports:\\n      - \"5000:5000\"\\n    environment:\\n      - MONGO_URI=mongodb://mongodb:27017/mernapp\\n    depends_on:\\n      - mongodb\\n  mongodb:\\n    image: mongo:5.0\\n    ports:\\n      - \"27017:27017\"\\n    volumes:\\n      - data:/data/db\\nvolumes:\\n  data:&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Pushing to AWS ECR&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Login to ECR:&lt;pre&gt;&lt;code&gt;aws ecr get-login-password | docker login --username AWS --password-stdin &amp;lt;account_id&amp;gt;.dkr.ecr.&amp;lt;region&amp;gt;.amazonaws.com&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Build and push your images:&lt;pre&gt;&lt;code&gt;docker build -t mern-frontend ./client\\ndocker tag mern-frontend &amp;lt;ECR_URI&amp;gt;/mern-frontend:latest\\ndocker push &amp;lt;ECR_URI&amp;gt;/mern-frontend:latest&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;img src=\"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=800&amp;h=400&amp;fit=crop\" alt=\"Docker Dashboard\" /&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;With Docker, deploying a full-stack MERN app becomes manageable, reproducible, and simple to scale up. You can use AWS ECS or EC2 to orchestrate these containers and take advantage of managed services.&lt;/p&gt;&lt;blockquote&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Always use environment variables for secrets. Avoid hardcoding credentials in your Dockerfiles or code.&lt;/blockquote&gt;&lt;h2&gt;Demo Video&lt;/h2&gt;&lt;video controls width=\"100%\"&gt;&lt;source src=\"https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_2mb.mp4\" type=\"video/mp4\"&gt;Your browser does not support the video tag.&lt;/video&gt;&lt;h2&gt;Useful Links&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=\"https://github.com/docker/awesome-compose\" target=\"_blank\"&gt;Awesome Docker Compose Examples&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/what-is-ecr.html\" target=\"_blank\"&gt;AWS ECR Docs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;"
}
