{
  "title": "Web Performance",
  "date": "2025-07-20",
  "tags": ["HTML","javascript","performance"],
  "content": "<p>In this article we will understand web performance, basically a lot of theory but fundamental things.</p>\n<h3 id="heading-importance-of-web-performance">Importance of web performance</h3>\n<ul>\n<li><p>Before google used to rank the website based on its load time but after 2021 google started to rank sites on performance.</p>\n</li>\n<li><p>Angry and frustrated users do not stick around long. Think for yourself, If you want to read something on the hash node and it's not loading how frustrated will you be?</p>\n</li>\n</ul>\n<h3 id="heading-psychology-of-waiting">Psychology of waiting</h3>\n<ul>\n<li><p><strong>People want to start</strong></p>\n<p>  They want to see something on the screen as soon as they have visited the page. if they see a blank page it will make them feel not good, and they will want to leave.</p>\n</li>\n<li><p><strong>Bored waits feel slower</strong></p>\n<p>  Engaging content can distract users from noticing wait times. If a site has a low cognitive load and fails to hold the user's attention, the waiting time feels more pronounced.</p>\n</li>\n<li><p><strong>Anxious waits feel slower</strong></p>\n<p>  If the user is checking a medical report or a report card, the wait may feel longer because they are anxious about the results.</p>\n</li>\n<li><p><strong>Unexplained waits feel slower</strong></p>\n<p>  if the users don't know why they are waiting then it may feel slower.</p>\n</li>\n<li><p><strong>Uncertain waits feel slower</strong></p>\n<p>  Not knowing when the screen will come can lead to thinking users this site is slow.</p>\n</li>\n<li><p><strong>People will wait for value</strong></p>\n<p>  If the users are not getting any value by waiting, I mean if it's not worth waiting then it may feel slower.</p>\n</li>\n</ul>\n<h3 id="heading-web-vitals-measuring-web-performance">Web Vitals - measuring web performance</h3>\n<p><img src="https://www.jeewangarg.com/blog_image/1619530054_imgpsh_fullhjsize_anim%20(1).jpg" alt class="image--center mx-auto" /></p>\n<p>we are going to talk about web vitals which include <mark>FCP, LCP, CLS, and FID</mark>.</p>\n<ul>\n<li><p><strong>FCP (first contentful paint)</strong></p>\n<p>  As the name suggests, the first thing that will be displayed when the user visits the page for the first time. Instead of showing the blank div, we must show something like a loader which will ensure the user that the content is loading<mark>(RESPONDING QUICK)</mark>. As I already told you users want to start as soon as they visit the page.</p>\n</li>\n<li><p><strong>LCP(largest contentful paint)</strong></p>\n<p>  After the FCP, the next biggest thing that will be seen is the LCP like the hero section, etc. In this phase, users start to believe that they are getting something. It is the largest percentage of the screen render<mark>(ALMOST READY)</mark>.</p>\n</li>\n<li><p><strong>CLS(cumulative layout shift)</strong></p>\n<p>  <img src="https://assets-global.website-files.com/615b3ceb21dfc449a69b5204/615b47d665fa1deb723a5cf5_6155e5762e5bc458ed88bb5c_6151b42bbbb7a245052935bf_7JlPVNGTio_dDfgEduz0FMUNw6JIec8EgaDQNj3GQWDRghZHDJfuxbCtpYlCs1OZrUj3YsT5r9Ge_VdzPH97ldUb6hB_qcfxvqY1I4f9ZOpCD0RjidbsMmeijmIsmIIUqR-nFwS0%25253Ds0.png" alt class="image--center mx-auto" /></p>\n<p>  It quantifies how much visible content shifts around while the page is loading, which can negatively impact user experience. It may happen because of the ads, images, etc. in the above example when the OPEN IN APP banner displayed all the content pushed to the bottom. it's not good for the website's performance.</p>\n</li>\n<li><p><strong>FID(first input delay)</strong></p>\n<p>  when the LCP happens, the users start to think that the website is ready but if our website is highly interactive and dynamic (loaded with a hell lot of JS) and when the user clicks on something, to respond to that event website will take time because right now it may be busy loading js file. It can slow the website's performance<mark>(DON'T LOAD TOO MUCH)</mark>.</p>\n</li>\n</ul>\n<h3 id="heading-how-to-check-performance">How to check performance?</h3>\n<p>Go to the website -&gt; right-click on it -&gt; click on inspect -&gt; click on the lighthouse -&gt; click on analyze page load.</p>\n<p>Wait a second, please first detach the console from the site then use this feature. how to do this and why? good question.</p>\n<p>click on three dots -&gt; then click on the first option on the top right corner.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1719302897490/e4f209ff-fb3f-4161-bfc3-920fe5bc0068.png" alt class="image--center mx-auto" /></p>\n<p>we need to detach the console because if we analyze on a small screen it will analyze for the small screen not for the big screen and you may get a good result and think my site is the fastest LOL. Please make these settings on your lighthouse too. You will get these options after clicking on the settings in the lighthouse.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1719303062148/8dfbac8e-e555-4ac1-b02b-5ac53c5cbe18.png" alt class="image--center mx-auto" /></p>\n<h3 id="heading-lab-data-vs-field-data">LAB DATA VS FIELD DATA</h3>\n<p>Lab data is the data that we get from the lighthouse and field data that we get from the real user. Google Chrome has an inbuilt API that sends the performance of the real-time users.</p>\n<p>There is a huge difference between the lab data and the field data.</p>\n<ul>\n<li><p>someone may have a good/bad network which can impact performance.</p>\n</li>\n<li><p>good/bad devices impact the performance.</p>\n</li>\n</ul>\n<p>Google ranks on the basis of P75, meaning performance is based on 75% of users. If 75 percent of users experience good performance, google will rank the site otherwise, it will not.</p>\n<p><strong>Note:-</strong> Most of the browsers don't have this inbuilt API that sends the field data. Even in iOS devices chrome under the hood uses Safari which doesn't let send field data.</p>\n<h3 id="heading-the-important-thing-to-remember-while-using-a-lighthouse">The important thing to remember while using a lighthouse</h3>\n<ul>\n<li><p>Always detach the console and disable your extension(recommended to use incognito mode). If we don't detach our console then it will take some extra screen size to open the console and impact the performance.</p>\n<p>  Running the lighthouse without detaching console</p>\n<p>  <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1720360714825/59d0e7db-cbc8-4bd4-b549-4fda18b83feb.png" alt class="image--center mx-auto" /></p>\n<p>  Running lighthouse after detaching console</p>\n<p>  <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1720360797873/200a8abc-eece-4c1d-859e-0d9f36fdd916.png" alt class="image--center mx-auto" /></p>\n<p>  what happened here is without detaching the console it tested the site on the remaining width and height after doing the console size. I got a bad result because that site is not responsive and I got a good result after detaching the console because that test was run on the original width and height.</p>\n</li>\n<li><p>you can detach your console by clicking on three dots and then the first option</p>\n<p>  <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1720361003544/fe6ad41d-4d10-4331-b335-8c66114f5aea.png" alt class="image--center mx-auto" /></p>\n<ul>\n<li><p>Always put your site window in front and detach the console in the background while the test is running. If you don't do it, you will get this error</p>\n<p>  <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1720361191624/b6668023-5f79-4372-b120-131102932731.png" alt class="image--center mx-auto" /></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id="heading-improving">IMPROVING</h3>\n<p>Let's learn how can we improve our site . We can improve the performance by doing â€œ FEWER THINGS.</p>\n<h4 id="heading-sized-correctly">Sized Correctly</h4>\n<ul>\n<li>Match the server resources (CPU, memory) to the expected load. Over-provisioning can be costly while under-provisioning can lead to slow responses.</li>\n</ul>\n<h4 id="heading-minimal-processing">Minimal Processing</h4>\n<ul>\n<li><strong>Process everything in chunks don't send everything at a time it can overload the client, use the concepts of streams, etc.</strong></li>\n</ul>\n<p><strong>Network Bandwidth</strong></p>\n<ul>\n<li><p><strong>Content Delivery Network (CDN)</strong>: A CDN caches content close to the user's location, reducing the time it takes for the content to travel across the internet. Services like Cloudflare, Akamai, and AWS CloudFront can significantly improve FCP.</p>\n</li>\n<li><p><strong>Compression</strong>: Compress resources (HTML, CSS, JavaScript) using Gzip or Brotli to reduce the amount of data transferred over the network.</p>\n</li>\n<li><p><strong>Minification</strong>: Minify CSS, JavaScript, and HTML files to reduce their size. Minification removes unnecessary characters, such as spaces and comments, without affecting functionality.</p>\n</li>\n<li><p><strong>Optimized Images</strong>: Serve appropriately sized and compressed images. Tools like ImageOptim or online services can help reduce image file sizes without compromising quality.</p>\n</li>\n<li><p><strong>Reduce Redirects</strong>: Minimize the number of redirects, as each redirect introduces additional round-trip times (RTTs) that can delay the FCP.</p>\n</li>\n</ul>\n<p><strong>Load Images according to the screen</strong></p>\n<ul>\n<li>Different screen sizes must have their relevant size of images available this can be done by using third-party services.</li>\n</ul>\n<p><strong>Defer Resources later</strong></p>\n<ul>\n<li><p>only load the important things in the start for the users. Don't load everything.</p>\n</li>\n<li><p>Make a priority list, stuff which has a high priority make it defer and lazy load less priority elements</p>\n<pre><code class="lang-abap">  &lt;script src=<span class="hljs-comment">"main.js" defer&gt;&lt;/script&gt;</span>\n</code></pre>\n<pre><code class="lang-javascript">  &lt;img src=<span class="hljs-string">"image.jpg"</span> loading=<span class="hljs-string">"lazy"</span> alt=<span class="hljs-string">"Example image"</span>&gt;\n</code></pre>\n<ul>\n<li><p>Preload the important files early like CSS, fonts, etc</p>\n<pre><code class="lang-javascript">\n  &lt;link rel=<span class="hljs-string">"preload"</span> href=<span class="hljs-string">"styles.css"</span> <span class="hljs-keyword">as</span>=<span class="hljs-string">"style"</span>&gt;\n  &lt;!-- Preload a JavaScript file --&gt;\n  &lt;link rel="preload" href="main.js" as="script"&gt;\n  &lt;!-- Preload a font --&gt;\n  &lt;link rel="preload" href="font.woff2" as="font" type="font/woff2" crossorigin="anonymous"&gt;\n</code></pre>\n<ul>\n<li><p>Preconnect which establishes early connections to important third-party origins. This can reduce latency by opening connections (DNS lookup, TCP handshake, TLS negotiation) before a request is actually made for a resource.</p>\n<pre><code class="lang-javascript">\n  &lt;link rel=<span class="hljs-string">"preconnect"</span> href=<span class="hljs-string">"https://example-cdn.com"</span>&gt;\n  &lt;!-- Preconnect to a font service --&gt;\n  &lt;link rel="preconnect" href="https://fonts.googleapis.com"&gt;\n  &lt;!-- Preconnect to an API endpoint --&gt;\n  &lt;link rel="preconnect" href="https://api.example.com"&gt;\n</code></pre>\n<ul>\n<li><p><strong>Use cases</strong>:</p>\n<ul>\n<li><p>Third-party APIs</p>\n</li>\n<li><p>CDN domains</p>\n</li>\n<li><p>Fonts hosted on third-party servers</p>\n</li>\n<li><p>Analytics and tracking scripts</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>By using these above techniques we can improve our LCP and FCP but not <strong>CLS, as we already know about CLS. It's the content shift after rendering the page that can happen due to the advertisement, banners, etc.</strong></p>\n<ul>\n<li>What we can do is, acquire the space before for the advertisement or any other thing that will push the content so that whenever our HTML is rendered it will leave the space and in the future, our advertisement can load in that blank space.</li>\n</ul>\n<p><img src="https://cdn-eapnl.nitrocdn.com/JnTwPNjjqyKvffxwwDChySNjBYLxncsF/assets/images/optimized/rev-0883e2a/www.bionicwp.com/wp-content/uploads/2021/03/cumulative-layout-shift.png" alt="What is Cumulative Layout Shift (CLS) - BionicWP" /></p>\n<p>as you can see in the above image our content is pushed by 55% after rendering. But leave 55% of the space for the future in the first place therefore it won't happen after rendering.</p>\n<ul>\n<li>It is the best practice to add advertisements and all at the bottom of the page. Because then our content won't be pushed and our performance will be good.</li>\n</ul>\n<hr />\n"
}
